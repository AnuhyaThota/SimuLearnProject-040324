from flask import current_app
from flask_login import UserMixin
from werkzeug.security import check_password_hash, generate_password_hash
from itsdangerous.url_safe import URLSafeTimedSerializer
from simulearn import db

class User(db.Model, UserMixin):
    """
    This class represents a user in the system. It is ORM-mapped to the 'users' table in the database.
    It is used to create, retrieve, update, and delete user records in the database.
    It contains functionality to set and check the user's password as well as to generate and verify a reset token.

    Attributes:
        id (int): The unique identifier of the user.
        fullname (str): The full name of the user.
        email (str): The email address of the user.
        username (str): The username of the user.
        password_hash (str): The hashed password of the user.
    """

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    fullname = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    username = db.Column(db.String(100), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))

    def set_password(self, password):
        """
        Sets the password for the user.
        It hashes the password before storing it in the database.

        Args:
            password (str): The password to set.
        """
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """
        Checks if the provided password matches the user's password.

        Args:
            password (str): The password to check.

        Returns:
            bool: True if the password is correct, False otherwise.
        """
        return check_password_hash(self.password_hash, password)

    def get_reset_token(self):
        """
        Generates a reset token for the user.
        It uses the user's ID and the application's secret key to generate the token.
        It is used to generate password reset links.

        Returns:
            str: The reset token.
        """
        serializer = URLSafeTimedSerializer(current_app.config["SECRET_KEY"])
        return serializer.dumps(self.id, salt="password-reset-salt")
    
    @staticmethod
    def verify_reset_token(token, expires_sec=1800):
        """
        Verifies the reset token and retrieves the user associated with it.
        It uses the application's secret key to verify the token and retrieve the user's ID.
        When user uses the password reset link, the token is verified and the user is redirected to the reset password page.

        Args:
            token (str): The reset token to verify.
            expires_sec (int, optional): The expiration time in seconds. Defaults to 1800.

        Returns:
            User: The user associated with the token, or None if the token is invalid or expired.
        """
        serializer = URLSafeTimedSerializer(current_app.config["SECRET_KEY"])
        try:
            user_id = serializer.loads(token, salt="password-reset-salt", max_age=expires_sec)
        except:
            return None
        return User.query.get(user_id)
    
class Lesson(db.Model):
    """
    This class represents a lesson in the system. It is ORM-mapped to the 'lessons' table in the database.
    It is used to create, retrieve, update, and delete lesson records in the database.
    Lesson contains the information about the lesson that user wants to learn.

    Attributes:
        id (int): The unique identifier of the lesson.
        created_by (int): The ID of the user who created the lesson.
        user_prompt (str): The prompt for the user in the lesson.
        lesson_title (str): The title of the lesson.
        lesson_desc (str): The description of the lesson.
        tutor_prompt (str): The prompt for the tutor in the lesson.
        sc_prompt (str): The prompt for the student counselor in the lesson.
    """

    __tablename__ = 'lessons'

    id = db.Column(db.Integer, primary_key=True)
    created_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    user_prompt = db.Column(db.Text, nullable=False)
    lesson_title = db.Column(db.Text, nullable=False)
    lesson_desc = db.Column(db.Text, nullable=False)
    tutor_prompt = db.Column(db.Text, nullable=False)
    sc_prompt = db.Column(db.Text, nullable=False)

class ConversationHistory(db.Model):
    """
    Represents the conversation history in the system.

    Attributes:
        id (int): The unique identifier of the conversation.
        lesson_id (int): The ID of the lesson associated with the conversation.
        user_id (int): The ID of the user associated with the conversation.
        user_input (str): The user's input in the conversation.
        response (str): The response generated by the system.
        agent_role (str): The role of the agent in the conversation.
        timestamp (datetime): The timestamp of the conversation.
    """

    __tablename__ = 'conversation_history'
    
    id = db.Column(db.Integer, primary_key=True)
    lesson_id = db.Column(db.Integer, db.ForeignKey('lessons.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    user_input = db.Column(db.Text, nullable=False)
    response = db.Column(db.Text, nullable=False)
    agent_role = db.Column(db.String(10), nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)

class UserCurrentLesson(db.Model):
    """
    Represents the current lesson of a user in the system.

    Attributes:
        id (int): The unique identifier of the user's current lesson.
        user_id (int): The ID of the user.
        lesson_id (int): The ID of the current lesson.
    """

    __tablename__ = 'user_current_lesson'
    
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False, unique=True)
    lesson_id = db.Column(db.Integer, db.ForeignKey('lessons.id'), nullable=False)
